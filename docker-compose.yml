name: socialnet

services:
  #################################################################
  #                           DATABASES                           #
  #################################################################
  # =========================
  # USERS DB – SHARD 1 (repmgr)
  # =========================
  shard1-pg-0:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/postgresql-repmgr:latest
    container_name: shard1-pg-0
    restart: unless-stopped
    environment:
      - POSTGRESQL_USERNAME=app
      - POSTGRESQL_PASSWORD=app_pass_shard1
      - POSTGRESQL_DATABASE=appdb
      - POSTGRESQL_POSTGRES_PASSWORD=supersecret
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=shard1-pg-0
      - REPMGR_NODE_NAME=shard1-pg-0
      - REPMGR_NODE_NETWORK_NAME=shard1-pg-0
      - REPMGR_PARTNER_NODES=shard1-pg-0,shard1-pg-1,shard1-pg-2
      - REPMGR_USERNAME=repl
      - REPMGR_PASSWORD=repl_pass
      - REPMGR_DATABASE=repmgr
      - REPMGR_PRIMARY_ROLE_WAIT=false
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - shard1-pg-0-data:/bitnami/postgresql
    networks:
      socialnet: {}
    ports:
      - "15432:5432"   # admin/debug access to node 0

  shard1-pg-1:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/postgresql-repmgr:latest
    container_name: shard1-pg-1
    restart: unless-stopped
    depends_on:
      shard1-pg-0:
        condition: service_started
    environment:
      - POSTGRESQL_USERNAME=app
      - POSTGRESQL_PASSWORD=app_pass_shard1
      - POSTGRESQL_DATABASE=appdb
      - POSTGRESQL_POSTGRES_PASSWORD=supersecret
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=shard1-pg-0
      - REPMGR_NODE_NAME=shard1-pg-1
      - REPMGR_NODE_NETWORK_NAME=shard1-pg-1
      - REPMGR_PARTNER_NODES=shard1-pg-0,shard1-pg-1,shard1-pg-2
      - REPMGR_USERNAME=repl
      - REPMGR_PASSWORD=repl_pass
      - REPMGR_DATABASE=repmgr
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - shard1-pg-1-data:/bitnami/postgresql
    networks:
      socialnet: {}
    ports:
      - "15433:5432"   # admin/debug access to node 1

  shard1-pg-2:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/postgresql-repmgr:latest
    container_name: shard1-pg-2
    restart: unless-stopped
    depends_on:
      shard1-pg-0:
        condition: service_started
    environment:
      - POSTGRESQL_USERNAME=app
      - POSTGRESQL_PASSWORD=app_pass_shard1
      - POSTGRESQL_DATABASE=appdb
      - POSTGRESQL_POSTGRES_PASSWORD=supersecret
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=shard1-pg-0
      - REPMGR_NODE_NAME=shard1-pg-2
      - REPMGR_NODE_NETWORK_NAME=shard1-pg-2
      - REPMGR_PARTNER_NODES=shard1-pg-0,shard1-pg-1,shard1-pg-2
      - REPMGR_USERNAME=repl
      - REPMGR_PASSWORD=repl_pass
      - REPMGR_DATABASE=repmgr
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - shard1-pg-2-data:/bitnami/postgresql
    networks:
      socialnet: {}
    ports:
      - "15434:5432"   # admin/debug access to node 2

  shard1-pgpool:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/pgpool:latest
    container_name: shard1-pgpool
    restart: unless-stopped
    depends_on:
      shard1-pg-0:
        condition: service_healthy
      shard1-pg-1:
        condition: service_healthy
      shard1-pg-2:
        condition: service_healthy
    environment:
      - PGPOOL_BACKEND_NODES=0:shard1-pg-0:5432,1:shard1-pg-1:5432,2:shard1-pg-2:5432
      - PGPOOL_SR_CHECK_USER=repl
      - PGPOOL_SR_CHECK_PASSWORD=repl_pass
      - PGPOOL_POSTGRES_USERNAME=app
      - PGPOOL_POSTGRES_PASSWORD=app_pass_shard1
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      # REQUIRED by Bitnami image:
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpass
    healthcheck:
      # Ensure bash for /dev/tcp
      test: ["CMD-SHELL", "bash -lc '</dev/tcp/127.0.0.1/5432' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks:
      socialnet:
        aliases:
          - shard1-pgpool
    ports:
      - "6433:5432"    # EXPOSED: client entrypoint for Shard 1

  # =========================
  # USERS DB – SHARD 2 (repmgr)
  # =========================
  shard2-pg-0:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/postgresql-repmgr:latest
    container_name: shard2-pg-0
    restart: unless-stopped
    environment:
      - POSTGRESQL_USERNAME=app
      - POSTGRESQL_PASSWORD=app_pass_shard2
      - POSTGRESQL_DATABASE=appdb
      - POSTGRESQL_POSTGRES_PASSWORD=supersecret
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=shard2-pg-0
      - REPMGR_NODE_NAME=shard2-pg-0
      - REPMGR_NODE_NETWORK_NAME=shard2-pg-0
      - REPMGR_PARTNER_NODES=shard2-pg-0,shard2-pg-1,shard2-pg-2
      - REPMGR_USERNAME=repl
      - REPMGR_PASSWORD=repl_pass
      - REPMGR_DATABASE=repmgr
      - REPMGR_PRIMARY_ROLE_WAIT=false
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - shard2-pg-0-data:/bitnami/postgresql
    networks:
      socialnet: {}
    ports:
      - "25432:5432"   # admin/debug access to node 0

  shard2-pg-1:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/postgresql-repmgr:latest
    container_name: shard2-pg-1
    restart: unless-stopped
    depends_on:
      shard2-pg-0:
        condition: service_started
    environment:
      - POSTGRESQL_USERNAME=app
      - POSTGRESQL_PASSWORD=app_pass_shard2
      - POSTGRESQL_DATABASE=appdb
      - POSTGRESQL_POSTGRES_PASSWORD=supersecret
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=shard2-pg-0
      - REPMGR_NODE_NAME=shard2-pg-1
      - REPMGR_NODE_NETWORK_NAME=shard2-pg-1
      - REPMGR_PARTNER_NODES=shard2-pg-0,shard2-pg-1,shard2-pg-2
      - REPMGR_USERNAME=repl
      - REPMGR_PASSWORD=repl_pass
      - REPMGR_DATABASE=repmgr
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - shard2-pg-1-data:/bitnami/postgresql
    networks:
      socialnet: {}
    ports:
      - "25433:5432"   # admin/debug access to node 1

  shard2-pg-2:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/postgresql-repmgr:latest
    container_name: shard2-pg-2
    restart: unless-stopped
    depends_on:
      shard2-pg-0:
        condition: service_started
    environment:
      - POSTGRESQL_USERNAME=app
      - POSTGRESQL_PASSWORD=app_pass_shard2
      - POSTGRESQL_DATABASE=appdb
      - POSTGRESQL_POSTGRES_PASSWORD=supersecret
      - POSTGRESQL_SYNCHRONOUS_COMMIT=on
      - POSTGRESQL_NUM_SYNCHRONOUS_REPLICAS=1
      - REPMGR_PRIMARY_HOST=shard2-pg-0
      - REPMGR_NODE_NAME=shard2-pg-2
      - REPMGR_NODE_NETWORK_NAME=shard2-pg-2
      - REPMGR_PARTNER_NODES=shard2-pg-0,shard2-pg-1,shard2-pg-2
      - REPMGR_USERNAME=repl
      - REPMGR_PASSWORD=repl_pass
      - REPMGR_DATABASE=repmgr
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d appdb"]
      interval: 10s
      timeout: 5s
      retries: 12
    volumes:
      - shard2-pg-2-data:/bitnami/postgresql
    networks:
      socialnet: {}
    ports:
      - "25434:5432"   # admin/debug access to node 2

  shard2-pgpool:
    platform: linux/amd64
    image: public.ecr.aws/bitnami/pgpool:latest
    container_name: shard2-pgpool
    restart: unless-stopped
    depends_on:
      shard2-pg-0:
        condition: service_healthy
      shard2-pg-1:
        condition: service_healthy
      shard2-pg-2:
        condition: service_healthy
    environment:
      - PGPOOL_BACKEND_NODES=0:shard2-pg-0:5432,1:shard2-pg-1:5432,2:shard2-pg-2:5432
      - PGPOOL_SR_CHECK_USER=repl
      - PGPOOL_SR_CHECK_PASSWORD=repl_pass
      - PGPOOL_POSTGRES_USERNAME=app
      - PGPOOL_POSTGRES_PASSWORD=app_pass_shard2
      - PGPOOL_ENABLE_LOAD_BALANCING=yes
      # REQUIRED by Bitnami image:
      - PGPOOL_ADMIN_USERNAME=admin
      - PGPOOL_ADMIN_PASSWORD=adminpass
    healthcheck:
      test: ["CMD-SHELL", "bash -lc '</dev/tcp/127.0.0.1/5432' || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 30
    networks:
      socialnet:
        aliases:
          - shard2-pgpool
    ports:
      - "7433:5432"    # EXPOSED: client entrypoint for Shard 2

  # -------------------------
  # OTHER Postgres DBs
  # -------------------------
  post-db:
    image: postgres:15
    container_name: post-db
    environment:
      POSTGRES_USER: post
      POSTGRES_PASSWORD: postpass
      POSTGRES_DB: post_db
    volumes:
      - post_db_data:/var/lib/postgresql/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U post -d post_db"]
      interval: 5s
      timeout: 3s
      retries: 30
    ports:
      - "5434:5432"

  feedback-db:
    image: postgres:15
    container_name: feedback-db
    environment:
      POSTGRES_USER: feedback
      POSTGRES_PASSWORD: feedbackpass
      POSTGRES_DB: feedback_db
    volumes:
      - feedback_db_data:/var/lib/postgresql/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U feedback -d feedback_db"]
      interval: 5s
      timeout: 3s
      retries: 30
    ports:
      - "5435:5432"

  message-db:
    image: postgres:15
    container_name: message-db
    environment:
      POSTGRES_USER: notify
      POSTGRES_PASSWORD: notifypass
      POSTGRES_DB: message_db
    volumes:
      - message_db_data:/var/lib/postgresql/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notify -d message_db"]
      interval: 5s
      timeout: 3s
      retries: 30
    ports:
      - "5436:5432"

  #################################################################
  #                           CACHES / QUEUES                     #
  #################################################################
  redis-feed:
    image: redis:7
    container_name: redis-feed
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_feed_data:/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  redis-message:
    image: redis:7
    container_name: redis-message
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_message_data:/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  redis-feedback:
    image: redis:7
    container_name: redis-feedback
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_feedback_data:/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 30

  kafka:
    image: confluentinc/cp-kafka:7.7.1
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: "1"
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_INTER_BROKER_LISTENER_NAME: "PLAINTEXT"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: "1"
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: "1"
      CLUSTER_ID: "MkU3OEVBNTcwNTJENDM2Qk"
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: "0"
    networks:
      socialnet: {}
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 20s

  #################################################################
  #                           MINIO / S3                          #
  #################################################################
  minio:
    image: minio/minio:latest
    container_name: minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      socialnet: {}
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9000/minio/health/ready || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  #################################################################
  #                       USER SERVICE (N SHARDS)                 #
  #################################################################
  user-service:
    build:
      context: ./services/user-service
    container_name: user-service
    volumes:
      - ./services/user-service:/app
    environment:
      APP_PORT: ":8081"
      NUM_SHARDS: "2"
      SHARDS_JSON: >
        [
          {"id":0,
          "writer":"host=shard1-pgpool port=5432 user=app password=app_pass_shard1 dbname=appdb sslmode=disable",
          "readers":[
            "host=shard1-pgpool port=5432 user=app password=app_pass_shard1 dbname=appdb sslmode=disable"
          ]},
          {"id":1,
          "writer":"host=shard2-pgpool port=5432 user=app password=app_pass_shard2 dbname=appdb sslmode=disable",
          "readers":[
            "host=shard2-pgpool port=5432 user=app password=app_pass_shard2 dbname=appdb sslmode=disable"
          ]}
        ]
      JWT_SECRET: "super-long-random-secret"
      AUTO_MIGRATE: "true"
      AIR_WATCHER_FORCE_POLLING: "true"
      AIR_TMP_DIR: "/app/tmp"
    depends_on:
      shard1-pgpool:
        condition: service_healthy
      shard2-pgpool:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8081:8081"

  #################################################################
  #                   OTHER CORE MICROSERVICES                    #
  #################################################################
  post-service:
    container_name: post-service
    build: ./services/post-service
    environment:
      DB_HOST: post-db
      DB_USER: post
      DB_PASSWORD: postpass
      DB_NAME: post_db
      MEDIA_SERVICE_URL: http://minio:9000
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      post-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8082:8082"

  feed-service:
    container_name: feed-service
    build:
      context: ./services/feed-service
      dockerfile: Dockerfile
    environment:
      REDIS_HOST: redis-feed
      REDIS_PORT: 6379
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      redis-feed:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8083:8083"

  feedback-service:
    container_name: feedback-service
    build: ./services/feedback-service
    environment:
      DB_HOST: feedback-db
      DB_USER: feedback
      DB_PASSWORD: feedbackpass
      DB_NAME: feedback_db
      REDIS_HOST: redis-feedback
      REDIS_PORT: 6379
    depends_on:
      feedback-db:
        condition: service_healthy
      redis-feedback:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8084:8084"

  message-service:
    container_name: message-service
    build: ./services/message-service
    environment:
      DB_HOST: message-db
      DB_USER: notify
      DB_PASSWORD: notifypass
      DB_NAME: message_db
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_HOST: redis-message
      REDIS_PORT: 6379
    depends_on:
      message-db:
        condition: service_healthy
      kafka:
        condition: service_healthy
      redis-message:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8085:8085"

  notification-service:
    container_name: notification-service
    build: ./services/notification-service
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8086:8086"

  media-service:
    container_name: media-service
    build: ./services/media-service
    environment:
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: minio
      S3_SECRET_KEY: minio123
    depends_on:
      minio:
        condition: service_healthy
    networks:
      socialnet: {}
    ports:
      - "8088:8088"

  #################################################################
  #                   API GATEWAY / LOAD BALANCER                 #
  #################################################################
  loadbalancer:
    image: nginx:latest
    container_name: loadbalancer
    depends_on:
      - api-gateway
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
    networks:
      socialnet: {}

  api-gateway:
    container_name: api-gateway
    build: ./services/api-gateway
    environment:
      USER_SERVICE_URL: http://user-service:8081
      POST_SERVICE_URL: http://post-service:8082
      FEED_SERVICE_URL: http://feed-service:8083
      FEEDBACK_SERVICE_URL: http://feedback-service:8084
      MESSAGE_SERVICE_URL: http://message-service:8085
      MEDIA_SERVICE_URL: http://media-service:8088
      NOTIFICATION_SERVICE_URL: http://notification-service:8086
    depends_on:
      user-service:
        condition: service_started
      post-service:
        condition: service_started
      feed-service:
        condition: service_started
      feedback-service:
        condition: service_started
      message-service:
        condition: service_started
      media-service:
        condition: service_started
      notification-service:
        condition: service_started
    networks:
      socialnet: {}
    ports:
      - "8080:8080"

  #################################################################
  #                    SWAGGER UI FOR DOCS                        #
  #################################################################
  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    container_name: swagger-ui
    depends_on:
      - api-gateway
    ports:
      - "9002:8080"
    environment:
      SWAGGER_JSON: /openapi/combined_openapi.yaml
    volumes:
      - ./combined_openapi.yaml:/openapi/combined_openapi.yaml:ro
    networks:
      socialnet: {}

networks:
  socialnet:

volumes:
  # Users DB shards (HA)
  shard1-pg-0-data:
  shard1-pg-1-data:
  shard1-pg-2-data:
  shard2-pg-0-data:
  shard2-pg-1-data:
  shard2-pg-2-data:

  # Other Postgres
  post_db_data:
  feedback_db_data:
  message_db_data:

  # Redis
  redis_feed_data:
  redis_message_data:
  redis_feedback_data:

  # MinIO
  minio_data:

  # Kafka
  kafka_data:
