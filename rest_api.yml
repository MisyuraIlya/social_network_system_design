openapi: 3.0.4
info:
  title: Social Network API
  description: |
    This is an example of a simple social network API that allows:
    - Managing friend relationships (adding/removing).
    - Viewing user friends.
    - Viewing user profiles.
    - Publishing posts (with optional media attachments).
    - Viewing feeds (home feed and user feed).
    - Viewing user dialogs/chats.
    - Sending and reading messages.
  version: 1.0.0
servers:
  - url: https://api.example.com/v1
tags:
  - name: User
    description: Operations related to user profiles
  - name: Friend
    description: Operations related to adding/removing friends
  - name: Post
    description: Operations related to posts and feeds
  - name: Media
    description: Operations related to uploading media for posts
  - name: Chat
    description: Operations related to chats and messages
  - name: Message
    description: Operations related to sending and reading messages

paths:

  ###############################################################
  #                      USER ENDPOINTS                         #
  ###############################################################
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user profile
      description: Returns a single user's profile information.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          description: The ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                   FRIEND ENDPOINTS                          #
  ###############################################################
  /friends:
    post:
      tags:
        - Friend
      summary: Add a friend
      description: Sends a friend request or immediately adds a user as a friend (depending on your logic).
      operationId: addFriend
      requestBody:
        description: Friend object containing user IDs or friend details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Friend'
      responses:
        '201':
          description: Friend added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'
        '400':
          description: Invalid friend data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /friends/{friendId}:
    delete:
      tags:
        - Friend
      summary: Remove a friend
      description: Removes a friend relationship between two users.
      operationId: deleteFriend
      parameters:
        - name: friendId
          in: path
          required: true
          description: The friend relationship ID or the friend user ID
          schema:
            type: string
      responses:
        '200':
          description: Friend relationship removed
        '404':
          description: Friend relationship not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/friends:
    get:
      tags:
        - Friend
      summary: View a user's friends
      description: Retrieves a list of all friends for the specified user.
      operationId: getUserFriends
      parameters:
        - name: userId
          in: path
          required: true
          description: User ID
          schema:
            type: string
      responses:
        '200':
          description: A list of friends
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                     POST & FEED ENDPOINTS                   #
  ###############################################################
  /posts:
    post:
      tags:
        - Post
      summary: Publish a new post
      description: Creates a new post in the user's feed.
      operationId: createPost
      requestBody:
        description: Post object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Post'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /feed:
    get:
      tags:
        - Post
      summary: Get home feed
      description: Returns the main (home) feed, typically including posts from the user and their friends.
      operationId: getHomeFeed
      parameters: []
      responses:
        '200':
          description: A list of posts in the home feed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/posts:
    get:
      tags:
        - Post
      summary: Get a user's posts
      description: Returns all posts for a specific user.
      operationId: getUserPosts
      parameters:
        - name: userId
          in: path
          required: true
          description: The user ID
          schema:
            type: string
      responses:
        '200':
          description: A list of posts from a user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                       MEDIA ENDPOINT                        #
  ###############################################################
  /posts/{postId}/media:
    post:
      tags:
        - Media
      summary: Upload media for a specific post
      description: Uploads an image/video to an existing post.
      operationId: uploadMedia
      parameters:
        - name: postId
          in: path
          required: true
          description: The ID of the post to which the media is uploaded
          schema:
            type: string
      requestBody:
        description: Binary media file
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: No file uploaded or invalid file
        '404':
          description: Post not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                     CHAT & MESSAGE ENDPOINTS                #
  ###############################################################
  /chats:
    get:
      tags:
        - Chat
      summary: View all chats for a user
      description: Retrieves a list of chat sessions/dialogs associated with the logged-in user.
      operationId: getUserChats
      parameters: []
      responses:
        '200':
          description: A list of user chats
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chats/{chatId}/messages:
    get:
      tags:
        - Message
      summary: View messages in a chat
      description: Retrieves a list of messages for a specific chat.
      operationId: getChatMessages
      parameters:
        - name: chatId
          in: path
          required: true
          description: The ID of the chat to retrieve messages from
          schema:
            type: string
      responses:
        '200':
          description: A list of messages
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: Chat not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - Message
      summary: Send a message in a chat
      description: Sends a new message to the specified chat.
      operationId: sendChatMessage
      parameters:
        - name: chatId
          in: path
          required: true
          description: The ID of the chat to send the message to
          schema:
            type: string
      requestBody:
        description: Message content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid message data
        '404':
          description: Chat not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: "user123"
        username:
          type: string
          example: "john_doe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john@example.com"
        avatarUrl:
          type: string
          format: uri
          example: "https://example.com/avatars/john_doe.png"
      required:
        - id
        - username

    Friend:
      type: object
      properties:
        userId:
          type: string
          example: "user123"
        friendId:
          type: string
          example: "friend456"
      required:
        - userId
        - friendId

    Post:
      type: object
      properties:
        id:
          type: string
          example: "post789"
        userId:
          type: string
          example: "user123"
        content:
          type: string
          example: "Hello world!"
        createdAt:
          type: string
          format: date-time
          example: "2025-03-21T10:15:30Z"
        mediaUrls:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/uploads/img1.png"]
      required:
        - userId
        - content

    Media:
      type: object
      properties:
        mediaId:
          type: string
          example: "media001"
        postId:
          type: string
          example: "post789"
        url:
          type: string
          format: uri
          example: "https://example.com/uploads/img1.png"
      required:
        - mediaId
        - postId
        - url

    Chat:
      type: object
      properties:
        chatId:
          type: string
          example: "chatABC"
        participantIds:
          type: array
          items:
            type: string
          example: ["user123", "user456"]
        lastMessage:
          type: string
          example: "Hey, how are you?"
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-21T10:20:00Z"
      required:
        - chatId
        - participantIds

    Message:
      type: object
      properties:
        messageId:
          type: string
          example: "msg001"
        chatId:
          type: string
          example: "chatABC"
        senderId:
          type: string
          example: "user123"
        content:
          type: string
          example: "Hello!"
        sentAt:
          type: string
          format: date-time
          example: "2025-03-21T10:30:15Z"
      required:
        - chatId
        - senderId
        - content

    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Bad Request"
      required:
        - code
        - message

  securitySchemes:
    # Example: simple Bearer token or API key usage
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
