openapi: 3.0.4
info:
  title: My Social Network API
  description: |
    This is an example of a simple social network API showcasing:
    - Managing friend relationships (adding/removing).
    - Viewing user profiles and friends.
    - Publishing posts (with optional media attachments).
    - Viewing feeds (home feed and user-specific feed).
    - Managing chats and messages.
  version: 1.0.0

servers:
  - url: https://api.my-social-network.com/v1

tags:
  - name: User
    description: Operations related to user profiles
  - name: Friend
    description: Operations related to adding/removing friends
  - name: Post
    description: Operations related to creating and viewing posts
  - name: Media
    description: Operations related to uploading media for posts
  - name: Chat
    description: Operations related to creating and viewing chats
  - name: Message
    description: Operations related to sending and retrieving messages

paths:

  ###############################################################
  #                      USER ENDPOINTS                         #
  ###############################################################
  /users/{userId}:
    get:
      tags:
        - User
      summary: Get user profile
      description: Retrieves profile information for a single user.
      operationId: getUserProfile
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Successfully retrieved user profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users:
    post:
      tags:
        - User
      summary: Create a new user
      description: Registers a new user in the system.
      operationId: createUser
      requestBody:
        description: New user details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid user data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                   FRIEND ENDPOINTS                          #
  ###############################################################
  /friends:
    post:
      tags:
        - Friend
      summary: Add a friend
      description: Sends a friend request or directly adds a friend, depending on business rules.
      operationId: addFriend
      requestBody:
        description: Object containing user IDs for creating a friend relationship
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Friend'
      responses:
        '201':
          description: Friend added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'
        '400':
          description: Invalid friend data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /friends/{friendId}:
    delete:
      tags:
        - Friend
      summary: Remove a friend
      description: Removes a friend relationship between two users.
      operationId: removeFriend
      parameters:
        - name: friendId
          in: path
          required: true
          description: The friend relationship ID or the friend user ID
          schema:
            type: string
      responses:
        '200':
          description: Friend relationship removed
        '404':
          description: Friend relationship not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/friends:
    get:
      tags:
        - Friend
      summary: View a user's friends
      description: Retrieves a list of all friends for the specified user.
      operationId: getUserFriends
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      responses:
        '200':
          description: A list of friends for the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                     POST & FEED ENDPOINTS                   #
  ###############################################################
  /posts:
    post:
      tags:
        - Post
      summary: Publish a new post
      description: Creates a new post by the authenticated user.
      operationId: createPost
      requestBody:
        description: Post object to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostCreate'
      responses:
        '201':
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '400':
          description: Invalid post data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    get:
      tags:
        - Post
      summary: Get all posts
      description: Retrieves all public posts (optional: you can add filters/pagination).
      operationId: getAllPosts
      parameters: []
      responses:
        '200':
          description: A list of all posts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /feed:
    get:
      tags:
        - Post
      summary: Get home feed
      description: Returns the home feed, typically posts from the user and their friends.
      operationId: getHomeFeed
      parameters: []
      responses:
        '200':
          description: A list of posts in the user's home feed
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/{userId}/posts:
    get:
      tags:
        - Post
      summary: Get a user's posts
      description: Returns all posts created by a specific user.
      operationId: getUserPosts
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
      responses:
        '200':
          description: A list of posts from the user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Post'
        '404':
          description: User not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{postId}:
    get:
      tags:
        - Post
      summary: Get a single post
      description: Retrieves a specific post by its ID.
      operationId: getSinglePost
      parameters:
        - name: postId
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
      responses:
        '200':
          description: The requested post
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        '404':
          description: Post not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                       MEDIA ENDPOINT                        #
  ###############################################################
  /posts/{postId}/media:
    post:
      tags:
        - Media
      summary: Upload media for a post
      description: Attaches an image (or other media) to an existing post.
      operationId: uploadMedia
      parameters:
        - name: postId
          in: path
          required: true
          description: ID of the post
          schema:
            type: string
      requestBody:
        description: Media file to upload
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Media uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Media'
        '400':
          description: No file uploaded or invalid file
        '404':
          description: Post not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  ###############################################################
  #                     CHAT & MESSAGE ENDPOINTS                #
  ###############################################################
  /chats:
    get:
      tags:
        - Chat
      summary: Get all chats for the authenticated user
      description: Retrieves a list of chats/dialogs for the current user.
      operationId: getUserChats
      parameters: []
      responses:
        '200':
          description: A list of chat sessions
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Chat'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Chat
      summary: Create a new chat
      description: Starts a new chat session between two or more users.
      operationId: createChat
      requestBody:
        description: Chat creation details (participant IDs, etc.)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChatCreate'
      responses:
        '201':
          description: Chat created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Chat'
        '400':
          description: Invalid chat data
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chats/{chatId}/messages:
    get:
      tags:
        - Message
      summary: View messages in a chat
      description: Retrieves messages from a specified chat.
      operationId: getChatMessages
      parameters:
        - name: chatId
          in: path
          required: true
          description: ID of the chat
          schema:
            type: string
      responses:
        '200':
          description: A list of messages in the chat
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '404':
          description: Chat not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      tags:
        - Message
      summary: Send a new message in a chat
      description: Sends a message from the current user to the specified chat.
      operationId: sendChatMessage
      parameters:
        - name: chatId
          in: path
          required: true
          description: ID of the chat
          schema:
            type: string
      requestBody:
        description: Message content
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageCreate'
      responses:
        '201':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '400':
          description: Invalid message data
        '404':
          description: Chat not found
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    ###############################################################
    #                        USER SCHEMAS                         #
    ###############################################################
    User:
      type: object
      properties:
        id:
          type: string
          example: "user123"
        username:
          type: string
          example: "john_doe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john@example.com"
        avatarUrl:
          type: string
          format: uri
          example: "https://example.com/avatars/john_doe.png"
        createdAt:
          type: string
          format: date-time
          example: "2025-03-21T10:15:30Z"
      required:
        - id
        - username
        - email

    UserCreate:
      type: object
      properties:
        username:
          type: string
          example: "john_doe"
        firstName:
          type: string
          example: "John"
        lastName:
          type: string
          example: "Doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          format: password
          example: "SecretPassword123"
      required:
        - username
        - email
        - password

    ###############################################################
    #                      FRIEND SCHEMAS                         #
    ###############################################################
    Friend:
      type: object
      properties:
        userId:
          type: string
          example: "user123"
        friendId:
          type: string
          example: "friend456"
      required:
        - userId
        - friendId

    ###############################################################
    #                       POST SCHEMAS                          #
    ###############################################################
    Post:
      type: object
      properties:
        id:
          type: string
          example: "post789"
        userId:
          type: string
          example: "user123"
        content:
          type: string
          example: "Hello world! This is my first post."
        mediaUrls:
          type: array
          items:
            type: string
            format: uri
          example: ["https://example.com/uploads/img1.png"]
        createdAt:
          type: string
          format: date-time
          example: "2025-03-21T10:15:30Z"
      required:
        - id
        - userId
        - content

    PostCreate:
      type: object
      properties:
        userId:
          type: string
          example: "user123"
        content:
          type: string
          example: "Hello world!"
      required:
        - userId
        - content

    ###############################################################
    #                       MEDIA SCHEMAS                         #
    ###############################################################
    Media:
      type: object
      properties:
        mediaId:
          type: string
          example: "media001"
        postId:
          type: string
          example: "post789"
        url:
          type: string
          format: uri
          example: "https://example.com/uploads/img1.png"
        uploadedAt:
          type: string
          format: date-time
          example: "2025-03-21T10:20:00Z"
      required:
        - mediaId
        - postId
        - url

    ###############################################################
    #                       CHAT SCHEMAS                          #
    ###############################################################
    Chat:
      type: object
      properties:
        chatId:
          type: string
          example: "chatABC"
        participantIds:
          type: array
          items:
            type: string
          example: ["user123", "user456"]
        lastMessage:
          type: string
          example: "How are you?"
        updatedAt:
          type: string
          format: date-time
          example: "2025-03-21T10:20:00Z"
      required:
        - chatId
        - participantIds

    ChatCreate:
      type: object
      properties:
        participantIds:
          type: array
          items:
            type: string
          example: ["user123", "user456"]
      required:
        - participantIds

    ###############################################################
    #                      MESSAGE SCHEMAS                        #
    ###############################################################
    Message:
      type: object
      properties:
        messageId:
          type: string
          example: "msg001"
        chatId:
          type: string
          example: "chatABC"
        senderId:
          type: string
          example: "user123"
        content:
          type: string
          example: "Hello!"
        sentAt:
          type: string
          format: date-time
          example: "2025-03-21T10:30:15Z"
      required:
        - messageId
        - chatId
        - senderId
        - content

    MessageCreate:
      type: object
      properties:
        senderId:
          type: string
          example: "user123"
        content:
          type: string
          example: "Hello!"
      required:
        - senderId
        - content

    ###############################################################
    #                        ERROR SCHEMA                         #
    ###############################################################
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
          example: 400
        message:
          type: string
          example: "Bad Request"
      required:
        - code
        - message

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
